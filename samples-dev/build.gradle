import groovy.io.FileType

String taskName(String verb, File sampleDir) {
    def languageName = sampleDir.parentFile.name
    def sampleName = sampleDir.name

    "${verb}${sampleName.capitalize()}${languageName.capitalize()}"
}

def createTestTask = { TaskContainer tasks, File sampleDir ->
    tasks.create(taskName('test', sampleDir), Exec) {
        commandLine './gradlew', 'clean', 'assemble'
        if (usesXcode(sampleDir)) {
            args 'cleanXcode', 'xcode'
        }
        workingDir sampleDir
    }
}

def createCleanTask = { TaskContainer tasks, File sampleDir ->
    tasks.create(taskName('clean', sampleDir), Exec) {
        commandLine './gradlew', 'clean'
        if (usesXcode(sampleDir)) {
            args 'cleanXcode'
        }
        workingDir sampleDir
    }
}

boolean usesXcode(File sampleDir) {
    return new File(sampleDir, "build.gradle").text.contains('xcode')
}

Task createLifecycleTask(TaskContainer tasks, String taskName, def createSampleLifecycleTask) {
    Task lifecycleTask = tasks.create(taskName)

    file('../swift').eachFile(FileType.DIRECTORIES) { lifecycleTask.dependsOn createSampleLifecycleTask(tasks, it) }
    file('../cpp').eachFile(FileType.DIRECTORIES)   { lifecycleTask.dependsOn createSampleLifecycleTask(tasks, it) }

    return lifecycleTask
}

createLifecycleTask(tasks, 'test', createTestTask)
createLifecycleTask(tasks, 'clean', createCleanTask)

Task getTestTaskFor(String samplePath) {
    tasks.getByName(taskName('test', rootProject.file(samplePath)))
}

getTestTaskFor('swift/external-file-dependency').mustRunAfter(getTestTaskFor('swift/simple-library'))
getTestTaskFor('cpp/external-file-dependency').mustRunAfter(getTestTaskFor('cpp/simple-library'))
