import groovy.io.FileType
import org.gradle.sample.plugins.generators.*

buildscript {
    dependencies {
        classpath "org.gradle.samples.plugins:generators"
    }
}

plugins {
    id "groovy"
    id "idea"
}

sourceCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    testImplementation gradleTestKit()
    testImplementation localGroovy()
    testImplementation("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    testImplementation "com.atlassian.commonmark:commonmark:0.10.0"
}

def supportedLanguages = [file("../swift"), file("../cpp"), file("../c")]

test {
    maxParallelForks = gradle.startParameter.maxWorkerCount
    inputs.files files(supportedLanguages).asFileTree.matching { PatternFilterable pattern ->
        pattern.exclude "**/build", "**/.gradle", "**/*.xcworkspace", "**/*.xcodeproj", "**/repo"
    }
}

task cleanRepo(type: Delete) {
    delete file("../cpp/repo")
}

task cleanSamples {
    dependsOn cleanRepo
    doLast {
        def toDelete = [
            file('../cpp/source-dependencies/repos'),
            file('../swift/source-dependencies/repos'),
            file('../swift/swift-package-manager-publish/release-plugin'),
            file('../swift/swift-package-manager-publish/list-library'),
            file('../swift/swift-package-manager-publish/utilities-library'),
            file('../cpp/swift-package-manager-publish/release-plugin'),
            file('../cpp/swift-package-manager-publish/list-library'),
            file('../cpp/swift-package-manager-publish/utilities-library'),
            file('../cpp/autotools-library/cmake-plugin'),
            file('../cpp/library-with-tests/cmake-plugin'),
            file('../cpp/cmake-library/cmake-plugin'),
            file('../cpp/cmake-source-dependencies/cmake-plugin'),
            file('../cpp/cmake-source-dependencies/app'),
            file('../cpp/cmake-source-dependencies/utilities'),
            file('../cpp/cmake-source-dependencies/list')
        ]
        supportedLanguages*.eachFileRecurse(FileType.DIRECTORIES) { def dir ->
            if ([/repo/, /build/, /\.gradle/, /\.build/, /.+\.xcworkspace/, /.+\.xcodeproj/, /\.vs/].any { dir.name ==~ it }) {
                toDelete << dir
            }
        }
        toDelete.each { it.deleteDir() }
        toDelete.clear()
        supportedLanguages*.eachFileRecurse(FileType.FILES) { def file ->
            if ([/.+\.sln/, /.+\.vcxproj/, /.+\.vcxproj.filters/, /.+\.vcxproj.user/].any { file.name ==~ it }) {
                toDelete << file
            }
        }
        toDelete.each { it.delete() }
    }
}

clean.dependsOn cleanSamples, cleanRepo

tasks.withType(SourceCopyTask) {
    templatesDir = file("src/templates")
    group = "source generation"
}

task generateSource {
    dependsOn tasks.withType(SourceCopyTask)
    group = "source generation"
    description = "generate the source files for all samples"
}

def cppUtilsLib = CppLibraryTemplate.of("cpp-lib-with-api-dep", "utilities")
def cppListLib = CppLibraryTemplate.of("cpp-lib", "list")

def swiftUtilsLib = SwiftLibraryTemplate.of("swift-lib-with-api-dep", "Utilities")
def swiftListLib = SwiftLibraryTemplate.of("swift-lib", "List")

task cppTransitiveDependencies(type: SourceCopyTask) {
    sampleDir = file("../cpp/transitive-dependencies")

    project(".").buildRoot()
    appProject("app").fromTemplate("cpp-app")
    libProject("utilities").fromTemplate(cppUtilsLib)
    libProject("list").fromTemplate(cppListLib)
}

task cppApplication(type: SourceCopyTask) {
    sampleDir = file("../cpp/application")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("cpp-app")
    appProject(".").fromTemplate(cppUtilsLib)
    appProject(".").fromTemplate(cppListLib)
}

task cppLibrary(type: SourceCopyTask) {
    sampleDir = file("../cpp/simple-library")

    libProject(".").buildRoot()
    libProject(".").fromTemplate(cppListLib)
}


task cppLibraryWithTests(type: SourceCopyTask) {
    sampleDir = file("../cpp/library-with-tests")

    libProject(".").buildRoot()
    libProject(".").fromTemplate(cppListLib)
}

task cppBinaryDependencies(type: SourceCopyTask) {
    sampleDir = file("../cpp/binary-dependencies")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("cpp-app")
    appProject(".").fromTemplate(cppUtilsLib)
}

task cppPrebuiltBinaries(type: SourceCopyTask) {
    sampleDir = file("../cpp/prebuilt-binaries")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("cpp-app")
    appProject(".").fromTemplate(cppUtilsLib)
}

task cppCmakeLibrary(type: SourceCopyTask) {
    sampleDir = file("../cpp/cmake-library") 

    project(".").buildRoot()
    appProject("app").fromTemplate("cpp-app")
    libProject("utilities").fromTemplate(cppUtilsLib)
    cmakeProject("list", "list").fromTemplate(cppListLib)
}

task cppAutotoolsLibrary(type: SourceCopyTask) {
    sampleDir = file("../cpp/autotools-library")

    appProject(".").buildRoot()
    appProject("app").fromTemplate("cpp-app-with-curl")
    appProject("app").fromTemplate(cppUtilsLib)
    appProject("app").fromTemplate(cppListLib)
}

task cppCmakeSourceDepedencies(type: SourceCopyTask) {
    sampleDir = file("../cpp/cmake-source-dependencies")

    cmakeProject("app").buildRoot()
    cmakeProject("app").fromTemplate("cpp-app-cmake-build")
    cmakeProject("app").fromTemplate("cpp-app")
    cmakeProject("utilities").buildRoot()
    cmakeProject("utilities").fromTemplate("cpp-utilities-lib-cmake-build")
    cmakeProject("utilities").fromTemplate(cppUtilsLib)
    cmakeProject("list").buildRoot()
    cmakeProject("list").fromTemplate("cpp-list-lib-cmake-build")
    cmakeProject("list").fromTemplate(cppListLib)
}

task cppCompositeBuild(type: SourceCopyTask) {
    sampleDir = file("../cpp/composite-build")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("cpp-app")
    libProject("utilities-library").fromTemplate(cppUtilsLib)
    libProject("list-library").fromTemplate(cppListLib)
}

task cppSourceDependencies(type: SourceCopyTask) {
    sampleDir = file("../cpp/source-dependencies")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("cpp-app")
    libProject("repos/utilities-library").fromTemplate(cppUtilsLib)
    libProject("repos/utilities-library").fromTemplate("cpp-utilities-lib-build")
    libProject("repos/list-library").fromTemplate(cppListLib)
    libProject("repos/list-library").fromTemplate("cpp-list-lib-build")
}

task cppBranchDependencies(type: SourceCopyTask) {
    sampleDir = file("../cpp/dependency-on-upstream-branch")

    appProject("app").buildRoot()
    appProject("app").fromTemplate("cpp-app")
    libProject("utilities-library").buildRoot()
    libProject("utilities-library").fromTemplate(cppUtilsLib)
    libProject("utilities-library").fromTemplate("cpp-utilities-lib-build")
    libProject("list-library").buildRoot()
    libProject("list-library").fromTemplate(cppListLib)
    libProject("list-library").fromTemplate("cpp-list-lib-build")
}

task cppOSDependencies(type: SourceCopyTask) {
    sampleDir = file("../cpp/operating-system-specific-dependencies")

    project(".").buildRoot()
    appProject("app").fromTemplate("cpp-app-uses-logger")
    appProject("app").fromTemplate("cpp-logger-uses-console")
    appProject("app").fromTemplate(cppUtilsLib)
    appProject("app").fromTemplate(cppListLib)
    libProject("ansiConsole").fromTemplate(CppLibraryTemplate.of("cpp-ansi-console-lib", "ansi_console"))
    libProject("winConsole").fromTemplate(CppLibraryTemplate.of("cpp-windows-console-lib", "win_console"))
}

task cppSourceGeneration(type: SourceCopyTask) {
    sampleDir = file("../cpp/source-generation")

    project(".").buildRoot()
}

task cppStaticLibrary(type: SourceCopyTask) {
    sampleDir = file("../cpp/static-library")

    project(".").buildRoot()
    appProject("app").fromTemplate("cpp-app")
    staticLibProject("utilities").fromTemplate(cppUtilsLib)
    libProject("list").fromTemplate(cppListLib)
}

task cppSwiftPackageManager(type: SourceCopyTask) {
    sampleDir = file("../cpp/swift-package-manager")

    project(".").buildRoot()
    swiftPMProject(".", "App").fromTemplate("cpp-app")
    swiftPMProject(".", "Utilities").fromTemplate(cppUtilsLib)
    swiftPMProject(".", "List").fromTemplate(cppListLib)
}

task cppSwiftPackageManagerPublish(type: SourceCopyTask) {
    sampleDir = file("../cpp/swift-package-manager-publish")

    swiftPMProject("app", "App").fromTemplate("cpp-app")

    project("release-plugin").buildRoot()
    project("release-plugin").fromTemplate("release-plugin")

    libProject("list-library").buildRoot()
    libProject("list-library").noPrivateHeaderDir()
    libProject("list-library").fromTemplate("cpp-list-lib-build-with-release")
    libProject("list-library").fromTemplate(cppListLib)

    libProject("utilities-library").buildRoot()
    libProject("utilities-library").noPrivateHeaderDir()
    libProject("utilities-library").fromTemplate("cpp-utilities-lib-build-with-release")
    libProject("utilities-library").fromTemplate(cppUtilsLib)
}

task cppProvisionableToolChains(type: SourceCopyTask) {
    sampleDir = file("../cpp/provisionable-tool-chains")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("cpp-app")
    appProject(".").fromTemplate(cppUtilsLib)
    appProject(".").fromTemplate(cppListLib)
    appProject(".").fromTemplate("cpp-provisionable-tool-chains-build")
}

task cApplication(type: SourceCopyTask) {
    sampleDir = file("../c/application")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("c-app")
}

task swiftApplication(type: SourceCopyTask) {
    sampleDir = file("../swift/application")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("swift-app")
    appProject(".").fromTemplate(swiftUtilsLib)
    appProject(".").fromTemplate(swiftListLib)
}

task swiftApplicationOSDependencies(type: SourceCopyTask) {
    sampleDir = file("../swift/operating-system-specific-dependencies")

    project(".").buildRoot()
    appProject("app").fromTemplate("swift-app")
    appProject("app").fromTemplate("swift-app-uses-logger")
    appProject("app").fromTemplate("swift-logger-uses-console")
    appProject("app").fromTemplate(swiftUtilsLib)
    appProject("app").fromTemplate(swiftListLib)

    libProject("linux-console").fromTemplate(SwiftLibraryTemplate.of("swift-linux-console-lib", "LinuxLogger"))
    libProject("macos-console").fromTemplate(SwiftLibraryTemplate.of("swift-macos-console-lib", "MacOsLogger"))
}

task swiftVersions(type: SourceCopyTask) {
    sampleDir = file("../swift/swift-versions")

    project(".").buildRoot()

    appProject("swift3-app").fromTemplate("swift-app")
    appProject("swift3-app").fromTemplate("swift-app-uses-logger")
    appProject("swift3-app").fromTemplate(SwiftLibraryTemplate.of("swift-logger-reports-swift-version", "Logger"))
    appProject("swift3-app").fromTemplate(SwiftLibraryTemplate.of("swift3-lib-with-api-dep", "Utilities"))
    appProject("swift3-app").fromTemplate(swiftListLib)

    appProject("swift4-app").fromTemplate("swift-app")
    appProject("swift4-app").fromTemplate("swift-app-uses-logger")
    appProject("swift4-app").fromTemplate(SwiftLibraryTemplate.of("swift-logger-reports-swift-version", "Logger"))
    appProject("swift4-app").fromTemplate(SwiftLibraryTemplate.of("swift4-lib-with-api-dep", "Utilities"))
    appProject("swift4-app").fromTemplate(swiftListLib)
}

task swiftSimpleLibrary(type: SourceCopyTask) {
    sampleDir = file("../swift/simple-library")

    libProject(".").buildRoot()
    libProject(".").fromTemplate(swiftListLib)
}

task swiftPrebuiltBinaries(type: SourceCopyTask) {
    sampleDir = file("../swift/prebuilt-binaries")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("swift-app")
    appProject(".").fromTemplate(swiftUtilsLib)
}

task swiftTransitiveDependencies(type: SourceCopyTask) {
    sampleDir = file("../swift/transitive-dependencies")

    project(".").buildRoot()
    appProject("app").fromTemplate("swift-app")
    libProject("utilities").fromTemplate(swiftUtilsLib)
    libProject("list").fromTemplate(swiftListLib)
}

task swiftCompositeBuild(type: SourceCopyTask) {
    sampleDir = file("../swift/composite-build")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("swift-app")
    libProject("utilities-library").fromTemplate(swiftUtilsLib)
    libProject("list-library").fromTemplate(swiftListLib)
}

task swiftInjectedPlugins(type: SourceCopyTask) {
    sampleDir = file("../swift/injected-plugins")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("swift-app")
    libProject("repos/utilities-library").fromTemplate(swiftUtilsLib)
    libProject("repos/list-library").fromTemplate(SwiftLibraryTemplate.of("swift-lib-unusable", "List"))
}

task swiftSourceDependencies(type: SourceCopyTask) {
    sampleDir = file("../swift/source-dependencies")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("swift-app")
    libProject("repos/utilities-library").fromTemplate(swiftUtilsLib)
    libProject("repos/utilities-library").fromTemplate("swift-utilities-lib-build")
    libProject("repos/list-library").fromTemplate(swiftListLib)
    libProject("repos/list-library").fromTemplate("swift-list-lib-build")
}

task swiftBranchDependencies(type: SourceCopyTask) {
    sampleDir = file("../swift/dependency-on-upstream-branch")

    appProject("app").buildRoot()
    appProject("app").fromTemplate("swift-app")
    libProject("utilities-library").buildRoot()
    libProject("utilities-library").fromTemplate(swiftUtilsLib)
    libProject("utilities-library").fromTemplate("swift-utilities-lib-build")
    libProject("list-library").buildRoot()
    libProject("list-library").fromTemplate(swiftListLib)
    libProject("list-library").fromTemplate("swift-list-lib-build")
}

task swiftSourceGeneration(type: SourceCopyTask) {
    sampleDir = file("../swift/source-generation")

    project(".").buildRoot()
}

task swiftStaticLibrary(type: SourceCopyTask) {
    sampleDir = file("../swift/static-library")

    project(".").buildRoot()
    appProject("app").fromTemplate("swift-app")
    libProject("utilities").fromTemplate(swiftUtilsLib)
    libProject("list").fromTemplate(swiftListLib)
}

task swiftCppDependencies(type: SourceCopyTask) {
    sampleDir = file("../swift/cpp-dependencies")

    project(".").buildRoot()
    staticLibProject("list").fromTemplate("cpp-lib-with-c-api")
    appProject("app").fromTemplate(SwiftLibraryTemplate.of("swift-lib-uses-c-api", "List"))
    appProject("app").fromTemplate(swiftUtilsLib)
    appProject("app").fromTemplate("swift-app")
}

task swiftSwiftPackageManager(type: SourceCopyTask) {
    sampleDir = file("../swift/swift-package-manager")

    project(".").buildRoot()
    swiftPMProject(".", "App").fromTemplate("swift-app")
    swiftPMProject(".", "Utilities").fromTemplate(swiftUtilsLib)
    swiftPMProject(".", "List").fromTemplate(swiftListLib)
}

task swiftSwiftPackageManagerPublish(type: SourceCopyTask) {
    sampleDir = file("../swift/swift-package-manager-publish")

    swiftPMProject("app", "App").fromTemplate("swift-app")

    project("release-plugin").buildRoot()
    project("release-plugin").fromTemplate("release-plugin")

    libProject("list-library").buildRoot()
    libProject("list-library").fromTemplate("swift-list-lib-build-with-release")
    libProject("list-library").fromTemplate(swiftListLib)

    libProject("utilities-library").buildRoot()
    libProject("utilities-library").fromTemplate("swift-utilities-lib-build-with-release")
    libProject("utilities-library").fromTemplate(swiftUtilsLib)
}

task swiftProvisionableToolChains(type: SourceCopyTask) {
    sampleDir = file("../swift/provisionable-tool-chains")

    appProject(".").buildRoot()
    appProject(".").fromTemplate("swift-app")
    appProject(".").fromTemplate(swiftUtilsLib)
    appProject(".").fromTemplate(swiftListLib)
    appProject(".").fromTemplate("swift-provisionable-tool-chains-build")
}

task generateCppRepos {
    dependsOn tasks.withType(GitRepoTask).matching { it.name.contains("Cpp") }
    group = "sample setup"
    description = "generate the Git repositories for C++ samples"
}

task generateSwiftRepos {
    dependsOn tasks.withType(GitRepoTask).matching { it.name.contains("Swift") }
    group = "sample setup"
    description = "generate the Git repositories for Swift samples"
}

task generateRepos {
    dependsOn generateSwiftRepos, generateCppRepos
    group = "sample setup"
    description = "generate the Git repositories for all samples"
}

task generateCppListRepo(type: GitRepoTask) {
    dependsOn cppSourceDependencies
    sampleDir = file("../cpp/source-dependencies/repos/list-library")
    change { ch ->
        changeContent("src/main/cpp/get.cpp", "index > 0", "index > 1")
        tag("1.0")
        "introduce bug in get.cpp"
    }
    change { ch ->
        changeContent("build.gradle", "version = '1.0'", "version = '1.1'")
        changeContent("src/main/cpp/get.cpp", "index > 1", "index > 0")
        tag("1.1")
        "fix bug in get.cpp"
    }
    change { ch ->
        changeContent("build.gradle", "version = '1.1'", "version = '2.0'")
        tag("2.0")
        "major release"
    }
    change { ch ->
        changeContent("build.gradle", "version = '2.0'", "version = '2.0-SNAPSHOT'")
        "work in progress"
    }
}

task generateCppUtilitiesRepo(type: GitRepoTask) {
    dependsOn cppSourceDependencies
    sampleDir = file("../cpp/source-dependencies/repos/utilities-library")
    change { ch ->
        tag("1.0")
        "initial version"
    }
    change { ch ->
        changeContent("build.gradle", "version = '1.0'", "version = '1.1'")
        changeContent("build.gradle", "list:1.0", "list:1.+")
        tag("1.1")
        "use latest list 1.x library"
    }
    change { ch ->
        changeContent("build.gradle", "version = '1.1'", "version = '2.0'")
        changeContent("build.gradle", "list:1.+", "list:2.+")
        tag("2.0")
        "require list 2.0"
    }
    change { ch ->
        changeContent("build.gradle", "version = '2.0'", "version = '2.0-SNAPSHOT'")
        "work in progress"
    }
}

task generateSwiftListRepo(type: GitRepoTask) {
    dependsOn swiftSourceDependencies
    sampleDir = file("../swift/source-dependencies/repos/list-library")
    change { ch ->
        changeContent("src/main/swift/LinkedList.swift", "c > 0", "c > 1")
        tag("1.0")
        "introduce bug in LinkedList"
    }
    change { ch ->
        changeContent("build.gradle", "version = '1.0'", "version = '1.1'")
        changeContent("src/main/swift/LinkedList.swift", "c > 1", "c > 0")
        tag("1.1")
        "fix bug in LinkedList"
    }
    change { ch ->
        changeContent("build.gradle", "version = '1.1'", "version = '2.0'")
        tag("2.0")
        "major release"
    }
    change { ch ->
        changeContent("build.gradle", "version = '2.0'", "version = '2.0-SNAPSHOT'")
        "work in progress"
    }
}

task generateSwiftUtilitiesRepo(type: GitRepoTask) {
    dependsOn swiftSourceDependencies
    sampleDir = file("../swift/source-dependencies/repos/utilities-library")
    change { ch ->
        tag("1.0")
        "initial version"
    }
    change { ch ->
        changeContent("build.gradle", "version = '1.0'", "version = '1.1'")
        changeContent("build.gradle", "list:1.0", "list:1.+")
        tag("1.1")
        "use latest list 1.x library"
    }
    change { ch ->
        changeContent("build.gradle", "version = '1.1'", "version = '2.0'")
        changeContent("build.gradle", "list:1.+", "list:2.+")
        tag("2.0")
        "require list 2.0"
    }
    change { ch ->
        changeContent("build.gradle", "version = '2.0'", "version = '2.0-SNAPSHOT'")
        "work in progress"
    }
}

task generateMinimalSwiftListRepo(type: GitRepoTask) {
    dependsOn swiftInjectedPlugins
    sampleDir = file("../swift/injected-plugins/repos/list-library")
    change { ch ->
        tag("1.0")
        "initial version"
    }
}

task generateMinimalSwiftUtilitiesRepo(type: GitRepoTask) {
    dependsOn swiftInjectedPlugins
    sampleDir = file("../swift/injected-plugins/repos/utilities-library")
    change { ch ->
        tag("1.0")
        "initial version"
    }
}

task generatePublishCppReleasePluginRepo(type: GitRepoTask) {
    dependsOn cppSwiftPackageManagerPublish
    sampleDir = file("../cpp/swift-package-manager-publish/release-plugin")
    change { ch ->
        tag("1.0")
        "initial version"
    }
}

task generatePublishCppListRepo(type: GitRepoTask) {
    dependsOn cppSwiftPackageManagerPublish
    sampleDir = file("../cpp/swift-package-manager-publish/list-library")
}

task generatePublishCppUtilitiesRepo(type: GitRepoTask) {
    dependsOn cppSwiftPackageManagerPublish
    sampleDir = file("../cpp/swift-package-manager-publish/utilities-library")
}

task generatePublishSwiftReleasePluginRepo(type: GitRepoTask) {
    dependsOn swiftSwiftPackageManagerPublish
    sampleDir = file("../swift/swift-package-manager-publish/release-plugin")
    change { ch ->
        tag("1.0")
        "initial version"
    }
}

task generatePublishSwiftListRepo(type: GitRepoTask) {
    dependsOn swiftSwiftPackageManagerPublish
    sampleDir = file("../swift/swift-package-manager-publish/list-library")
}

task generatePublishSwiftUtilitiesRepo(type: GitRepoTask) {
    dependsOn swiftSwiftPackageManagerPublish
    sampleDir = file("../swift/swift-package-manager-publish/utilities-library")
}

task generateBranchCppListRepo(type: GitRepoTask) {
    dependsOn cppBranchDependencies
    sampleDir = file("../cpp/dependency-on-upstream-branch/list-library")
    change { ch ->
        tag("1.0")
        "initial version"
    }
}

task generateBranchCppUtilitiesRepo(type: GitRepoTask) {
    dependsOn cppBranchDependencies
    sampleDir = file("../cpp/dependency-on-upstream-branch/utilities-library")
    change { ch ->
        tag("1.0")
        "initial version"
    }
    change { ch ->
        branch("release")
        changeContent("build.gradle", "version = '1.0'", "version = '1.1'")
        "branch for release"
    }
    change { ch ->
        checkout("master")
        changeContent("build.gradle", "version = '1.0'", "version = '2.0'")
        "prepare next version"
    }
}

task generateBranchSwiftListRepo(type: GitRepoTask) {
    dependsOn swiftBranchDependencies
    sampleDir = file("../swift/dependency-on-upstream-branch/list-library")
    change { ch ->
        tag("1.0")
        "initial version"
    }
}

task generateBranchSwiftUtilitiesRepo(type: GitRepoTask) {
    dependsOn swiftBranchDependencies
    sampleDir = file("../swift/dependency-on-upstream-branch/utilities-library")
    change { ch ->
        tag("1.0")
        "initial version"
    }
    change { ch ->
        branch("release")
        changeContent("build.gradle", "version = '1.0'", "version = '1.1'")
        "branch for release"
    }
    change { ch ->
        checkout("master")
        changeContent("build.gradle", "version = '1.0'", "version = '2.0'")
        "prepare next version"
    }
}

task generateCppCmakeLibraryPluginRepo(type:  GitRepoTask) {
    dependsOn cppCmakeLibrary
    sampleDir = file("../cpp/cmake-library/cmake-plugin")
    change {
        tag("1.0")
        "initial version"
    }
}

task generateCppCmakeSourceDependenciesPluginRepo(type:  GitRepoTask) {
    dependsOn cppCmakeSourceDepedencies
    sampleDir = file("../cpp/cmake-source-dependencies/cmake-plugin")
    change {
        tag("1.0")
        "initial version"
    }
}

task generateCppCmakeSourceDependenciesListLibraryRepo(type:  GitRepoTask) {
    dependsOn cppCmakeSourceDepedencies
    sampleDir = file("../cpp/cmake-source-dependencies/list")
    change {
        tag("1.0")
        "initial version"
    }
}

task generateCppCmakeSourceDependenciesUtilityLibraryRepo(type:  GitRepoTask) {
    dependsOn cppCmakeSourceDepedencies
    sampleDir = file("../cpp/cmake-source-dependencies/utilities")
    change {
        tag("1.0")
        "initial version"
    }
}

task generateCppCmakeSourceDependenciesUtilityAppRepo(type:  GitRepoTask) {
    dependsOn cppCmakeSourceDepedencies
    sampleDir = file("../cpp/cmake-source-dependencies/app")
    change {
        tag("1.0")
        "initial version"
    }
}

task generateCppAutotoolsLibraryPluginRepo(type:  GitRepoTask) {
    dependsOn cppAutotoolsLibrary
    sampleDir = file("../cpp/autotools-library/cmake-plugin")
    change {
        tag("1.0")
        "initial version"
    }
}
