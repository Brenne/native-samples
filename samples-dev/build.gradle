plugins {
    id 'groovy'
    id 'idea'
}

repositories {
    jcenter()
}

dependencies {
    testImplementation gradleTestKit()
    testImplementation localGroovy()
    testImplementation('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }
}

import groovy.io.FileType

String taskName(String verb, File sampleDir) {
    def languageName = sampleDir.parentFile.name
    def sampleName = sampleDir.name

    "${verb}${sampleName.capitalize()}${languageName.capitalize()}"
}

def createCleanTask = { TaskContainer tasks, File sampleDir ->
    tasks.create(taskName('clean', sampleDir), Exec) {
        commandLine './gradlew', 'clean'
        if (usesXcode(sampleDir)) {
            args 'cleanXcode'
        }
        workingDir sampleDir
    }
}

boolean usesXcode(File sampleDir) {
    return new File(sampleDir, "build.gradle").text.contains('xcode')
}

Task createLifecycleTask(TaskContainer tasks, String taskName, def createSampleLifecycleTask) {
    Task lifecycleTask = tasks.create(taskName)

    [file('../swift'), file('../cpp')]*.eachFile(FileType.DIRECTORIES) {
        if (it.name == 'repo') {
            return
        }
        lifecycleTask.dependsOn createSampleLifecycleTask(tasks, it)
    }

    return lifecycleTask
}

createLifecycleTask(tasks, 'cleanSamples', createCleanTask)

def cleanRepo = tasks.create('cleanRepo', Delete)
cleanRepo.delete(file('../cpp/repo'))
cleanSamples.dependsOn cleanRepo

clean.dependsOn cleanSamples