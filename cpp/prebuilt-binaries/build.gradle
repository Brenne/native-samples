import org.gradle.internal.os.OperatingSystem

plugins {
    id 'cpp-application'
    id 'xcode'
}

def greeterIncludePath = file('../simple-library/src/main/public')

def greeterDebugLib = file(OperatingSystem.current().getSharedLibraryName('../simple-library/build/lib/main/debug/math'))
def greeterReleaseLib = file(OperatingSystem.current().getSharedLibraryName('../simple-library/build/lib/main/release/math'))

def greeterDebugLinkLib = file(OperatingSystem.current().getLinkLibraryName('../simple-library/build/lib/main/debug/math'))
def greeterReleaseLinkLib = file(OperatingSystem.current().getLinkLibraryName('../simple-library/build/lib/main/release/math'))

if (!greeterDebugLib.exists() || !greeterReleaseLib.exists()) {
    throw new GradleException("Please build project at ${file('../simple-library')} with: './gradlew -p ../simple-library assembleRelease assembleDebug'")
}
if (!greeterIncludePath.exists()) {
    throw new GradleException("Please ensure in include path: ${greeterIncludePath} exists")
}

components.main.binaries.whenElementFinalized { binary ->
    dependencies {
        if (binary.optimized) {
            add(binary.includePathConfiguration.name, files(greeterIncludePath))
            add(binary.linkLibraries.name, files(greeterReleaseLinkLib))
            add(binary.runtimeLibraries.name, files(greeterReleaseLib))
        } else {
            add(binary.includePathConfiguration.name, files(greeterIncludePath))
            add(binary.linkLibraries.name, files(greeterDebugLinkLib))
            add(binary.runtimeLibraries.name, files(greeterDebugLib))
        }
    }
}
