plugins {
    id 'base'
}

/**
 * Define some configurations to present the outputs of this build
 * to other Gradle projects.
 */
configurations {
    headers {
        attributes.attribute(Usage.USAGE_ATTRIBUTE, 
            objects.named(Usage.class, Usage.C_PLUS_PLUS_API))
    }
    linktimeLibs {
        attributes.attribute(Usage.USAGE_ATTRIBUTE, 
            objects.named(Usage.class, Usage.NATIVE_LINK))
    }
    runtimeLibs {
        attributes.attribute(Usage.USAGE_ATTRIBUTE, 
            objects.named(Usage.class, Usage.NATIVE_RUNTIME))
    }
}

/**
 * Create some tasks to drive the CMake build
 */
def cmakeExecutable = System.getenv('CMAKE_EXECUTABLE') ?: 'cmake'
def makeExecutable = System.getenv('MAKE_EXECUTABLE') ?: 'make'

task cmake(type: Exec) { task ->
    ext.cmakeFiles = fileTree(projectDir)
        .include('**/CMakeFiles/**/*')
        .include('**/Makefile')
        .include('**/*.cmake')
        .include('CMakeCache.txt')
        .include('install_manifest.txt')
        .builtBy(task)

    workingDir projectDir

    commandLine cmakeExecutable, '.'

    inputs.files fileTree(projectDir).include('**/CMakeLists.txt')
    outputs.files cmakeFiles
}

task make(type: Exec) {
    ext.staticLibrary = newOutputFile()

    workingDir projectDir

    commandLine makeExecutable

    staticLibrary.set(file("src/utilities/libutilities.a"))

    inputs.files cmake.cmakeFiles
    outputs.file staticLibrary
}

clean {
    delete cmake.cmakeFiles
    delete make.staticLibrary
}

/**
 * Configure the artifacts which should be exposed by this build
 * to other Gradle projects.
 */
configurations.headers.outgoing.artifact file('src/utilities/include')
configurations.linktimeLibs.outgoing.artifact make.staticLibrary
