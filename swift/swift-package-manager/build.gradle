allprojects {
    apply plugin: 'xcode'
}

project(':app') {
    apply plugin: 'swift-application'
    apply plugin: 'xctest'

    // Configure the source files of the executable
    application {
        source.from rootProject.file('Sources/App')
    }
    
    
    xctest {
        if (!System.properties['os.name'].equals("Linux")) {
            source.from rootProject.fileTree(dir: 'Tests/AppTests', include: '**/*.swift', exclude: 'main.swift')
        } else {
            source.from rootProject.fileTree(dir: 'Tests/AppTests', include: '**/*.swift')
        }
    }

    // Configure the dependencies of the executable
    dependencies {
        implementation project(':utilities')
    }
}

project(':utilities') {
    apply plugin: 'swift-library'
    apply plugin: 'xctest'

    // Configure the source files of the library
    library {
        source.from rootProject.file('Sources/Utilities')
    }

    dependencies {
        api project(':list')
    }

    xctest {
        if (!System.properties['os.name'].equals("Linux")) {
            source.from rootProject.fileTree(dir: 'Tests/UtilitiesTests', include: '**/*.swift', exclude: 'main.swift')
        } else {
            source.from rootProject.fileTree(dir: 'Tests/UtilitiesTests', include: '**/*.swift')
        }
    }
}

project(':list') {
    apply plugin: 'swift-library'
    apply plugin: 'xctest'

    // Configure the source files of the library
    library {
        source.from rootProject.file('Sources/List')
    }

    xctest {
        if (!System.properties['os.name'].equals("Linux")) {
            source.from rootProject.fileTree(dir: 'Tests/ListTests', include: '**/*.swift', exclude: 'main.swift')
        } else {
            source.from rootProject.fileTree(dir: 'Tests/ListTests', include: '**/*.swift')
        }
    }
}

// Move the build directories for all projects into a single top-level directory
allprojects { p ->
    buildDir = rootProject.file("build/${p.name}")

    // Work around for https://github.com/gradle/gradle-native/issues/376
    tasks.withType(AbstractLinkTask) {
        doFirst {
            p.projectDir.mkdirs()
        }
    }
}
